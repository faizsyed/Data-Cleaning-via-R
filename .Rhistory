1 + 1
install.packages("ggplot2")
install.packages(c("ggplot2", "devtools", "lme4"))
help(devtools)
??devtools
sessioninfo::
sessionInfo()
print("This file was created in RStudio")
print("And now it is lives on GitHub")
print("And now it is lives on GitHub")
print('Just tryingt it out')
git init
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
play()
flag_shapes
nxt()
sapply(flag_shapes, range)
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unqiue_vals
unique_vals
sapply(unqiue_vals, length)
sapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
sapply(unique_vals, function(elem) elem[2])
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
flags$landmass
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
play()
flags
tapply(flags$religion, flags$zone, mean)
table(flags$religion)
debug(ls)
debug(ls)
install.packages("xlsx")
library(xlsx)
library(xlsx)
install.packages("xlsx")
library(xlsx)
system("java -version")
system("java -version")
install.packages("rJava")
library(xlsx)
install.packages("rJava")
install.packages("xlsx")
library(xlsx)
library(xlsx)
install.packages("xlsx")
library(xlsx)
library(xlsx)
install.packages(xlsx)
install.packages("xlsx")
library(xlsx)
library(xlsx)
library(datasets)
data(mtcars)
names(mtcars)
head(mtcars)
str(mtcars$mpg, mtcars$cyl)
split(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
test <- tapply(mtcars$mpg, mtcars$cyl, mean)
test
test <- tapply(mtcars$mpg, mtcars$cyl)
test
names(test)
mtcars
head(mtcars)
val <- tapply(mtcars$hp, mtcars$cyl==4, mean) - tapply(mtcars$hp, mtcars$cyl==4, mean)
val
val <- tapply(mtcars$hp, mtcars$cyl==4, mean) - tapply(mtcars$hp, mtcars$cyl==8, mean)
val
val <- round(apply(mtcars$hp, mtcars$cyl==4, mean) - apply(mtcars$hp, mtcars$cyl==8, mean))
val <- (apply(mtcars$hp, mtcars$cyl==4, mean) - apply(mtcars$hp, mtcars$cyl==8, mean)
val <- apply(mtcars$hp, mtcars$cyl==4, mean) - apply(mtcars$hp, mtcars$cyl==8, mean)
val <- tapply(mtcars$hp, mtcars$cyl, mean)
val
val["8"]-val["4"]
round(val["8"]-val["4"])
debug(ls)
setwd("~/R Studio Projects/Cleaning data/Cleaning Data JHU Course Project")
library(dplyr)
filename <- "Coursera_DS3_Final.zip"
# Checking if archieve already exists.
if (!file.exists(filename)){
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileURL, filename, method="curl")
}
# Checking if folder exists
if (!file.exists("UCI HAR Dataset")) {
unzip(filename)
}
features
TidyData
str(FinalData)
str(FinalData)
TidyData
write.table(FinalData, "FinalData.txt", row.name=FALSE)
getwd()
TidyData
library(dplyr)
library(tidyr)
filename <- "Coursera_DS3_Final.zip"
# Checking if archieve already exists.
if (!file.exists(filename)){
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileURL, filename, method="curl")
}
# Checking if folder exists
if (!file.exists("UCI HAR Dataset")) {
unzip(filename)
}
features <- read.table("UCI HAR Dataset/features.txt", col.names = c("n","functions"))
activities <- read.table("UCI HAR Dataset/activity_labels.txt", col.names = c("code", "activity"))
subject_test <- read.table("UCI HAR Dataset/test/subject_test.txt", col.names = "subject")
x_test <- read.table("UCI HAR Dataset/test/X_test.txt", col.names = features$functions)
y_test <- read.table("UCI HAR Dataset/test/y_test.txt", col.names = "code")
subject_train <- read.table("UCI HAR Dataset/train/subject_train.txt", col.names = "subject")
x_train <- read.table("UCI HAR Dataset/train/X_train.txt", col.names = features$functions)
y_train <- read.table("UCI HAR Dataset/train/y_train.txt", col.names = "code")
X <- rbind(x_train, x_test)
Y <- rbind(y_train, y_test)
Subject <- rbind(subject_train, subject_test)
Merged_Data <- cbind(Subject, Y, X)
TidyData <- Merged_Data %>% select(subject, code, contains("mean"), contains("std"))
TidyData
TidyData$code <- activities[TidyData$code, 2]
names(TidyData)[2] = "activity"
names(TidyData)<-gsub("Acc", "Accelerometer", names(TidyData))
names(TidyData)<-gsub("Gyro", "Gyroscope", names(TidyData))
names(TidyData)<-gsub("BodyBody", "Body", names(TidyData))
names(TidyData)<-gsub("Mag", "Magnitude", names(TidyData))
names(TidyData)<-gsub("^t", "Time", names(TidyData))
names(TidyData)<-gsub("^f", "Frequency", names(TidyData))
names(TidyData)<-gsub("tBody", "TimeBody", names(TidyData))
names(TidyData)<-gsub("-mean()", "Mean", names(TidyData), ignore.case = TRUE)
names(TidyData)<-gsub("-std()", "STD", names(TidyData), ignore.case = TRUE)
names(TidyData)<-gsub("-freq()", "Frequency", names(TidyData), ignore.case = TRUE)
names(TidyData)<-gsub("angle", "Angle", names(TidyData))
names(TidyData)<-gsub("gravity", "Gravity", names(TidyData))
FinalData <- TidyData %>%
group_by(subject, activity) %>%
summarise_all(funs(mean))
write.table(FinalData, "FinalData.txt", row.name=FALSE)
names(TidyData)
head(FinalData)
